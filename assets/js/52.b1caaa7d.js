(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{659:function(s,t,a){"use strict";a.r(t);var n=a(8),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"状态模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[s._v("#")]),s._v(" 状态模式")]),s._v(" "),a("p",[s._v("状态模式用与解决系统中复杂对象的状态转换及不同状态下行为的封装问题。")]),s._v(" "),a("p",[a("strong",[s._v("定义：")])]),s._v(" "),a("p",[s._v("允许一个对象在其内部状态改变时改变他的行为，对象看起来似乎修改了它的类。")]),s._v(" "),a("p",[s._v("包含三个角色：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Context（环境类）：上下文类，拥有多种状态的的对象。包含：一个抽象的state的实例，定义当前状态，方法：request()，setState(State state)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Contest {\n\tprivate State state\n\tprivate  int Value\n\tpublic void setState(State state){\n\t\tthis.state = state\n\t}\n\tpublic void request() {\n\t\tstate.handle();\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("State（抽象状态类）：定义一个接口以封装与环境类的一个特定状态相关的行为（handle），声明不同状态对应的方法，其子类实现。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class State{\n\tpublic abstract void handle();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteState（具体状态类 ）：具体实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteState {\n\tpublic void handle() {\n\t\txxx\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("p",[s._v("状态转换方式：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("环境类负责状态转换")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public void changeState() {\n\tif (value == 0) {\n\t\tthis.setState(new ConcreteStateA())\n\t} else {\n\t\tthis.setState(new ConcreteStateB())\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("具体状态实现类状态转换")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public void changeState(Context ctx) {\n\tif (value == 0) {\n\t\tctx.setState(new ConcreteStateA())\n\t} else {\n\t\tctx.setState(new ConcreteStateB())\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("封装了状态转换规则，状态转换封装在环境或具体状态类中，不是分散在一个个业务方法中")]),s._v(" "),a("li",[s._v("状态有关的行为放在一个类中，注入一个不同的状态对象即可使环境对象拥有不同的行为")]),s._v(" "),a("li",[s._v("允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大的条件语句块。")]),s._v(" "),a("li",[s._v("多个环境对象共享一个状态对象，减少系统中对象的个数")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("增加系统的类和对象")]),s._v(" "),a("li",[s._v("结构和实现比较复杂")]),s._v(" "),a("li",[s._v("开闭原则支持不太好，增加新的状态需要修改那些负责状态转换的源码")])]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("对象的行为依赖于它的状态，状态改变会导致行为的变化")]),s._v(" "),a("li",[s._v("代码中包含大量与对象状态有关的条件语句")])]),s._v(" "),a("h2",{attrs:{id:"观察者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[s._v("#")]),s._v(" 观察者模式")]),s._v(" "),a("p",[s._v("一个对象发生变化时通知其他对象，其他对象将相应做出反应。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("定义对象之间一种一对多依赖关系，每当一个对象状态放生改变时，其相关依赖对象皆通知并被自动更新。别名：发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式，是一种对象行为型模式。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Subject（目标）：目标又称为主题，观察的对象。方法：增加/删除对象，通知方法notify()，可以是接口，也能是抽象类具体类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Submit {\n\tprotected ArrayList observers<Observer> = new ArrayList();\n\tpublic void attach(Observer observer){\n\t\tobservers.add(observer);\n\t}\n\tpublic void detach(Observer observer){\n\t\t\n\t}\n\tpublic abstract void notify();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteSubject（具体目标）：目标的子类，通常包含经常发生改变的数据，当数据发生改变，通知各个观察者。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteSubject extends Subject {\n\tpublic void notify() {\n\t\tfor (Object obs:observers) {\n\t\t\t((Observer)abs).update();\n\t\t}\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Observer（观察者）：定义观察目标的改变做出反应，一般定义为接口update方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Observer{\n\tpublic void update();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteObserver（具体观察者）： 维护一个指向具体目标对象的引用，存储具体观察者的有关状态，实现update方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteObserver implements Observer{\n\tpublic void update() {\n\t\txx\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("p",[s._v("JDK事件模型1.0采用责任链模式，改为观察者模式；")]),s._v(" "),a("p",[s._v("MVC设计模式也是一种观察者模式；")]),s._v(" "),a("p",[a("strong",[s._v("主要优势")])]),s._v(" "),a("ol",[a("li",[s._v("实现表示层和逻辑层分离。")]),s._v(" "),a("li",[s._v("目标和观察者之间建立一个抽象耦合。")]),s._v(" "),a("li",[s._v("观察者支持广播通信")]),s._v(" "),a("li",[s._v("观察者满足开闭原则")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("一个观察者观察目标对象有多个直接和间接观察者，所有观察者都通知会花费很多时间")]),s._v(" "),a("li",[s._v("观察者和观察目标存在循环依赖。观察目标会触发它们之间的循环依赖，导致系统崩溃")]),s._v(" "),a("li",[s._v("没有相应机制让观察者知道目标对象是怎么发生变化。")])]),s._v(" "),a("p",[a("strong",[s._v("使用场景")])]),s._v(" "),a("ol",[a("li",[s._v("一个抽象模式有两个方面，其中一个方面依赖另外一个方面，将这个两个方面封装在独立对象可以独立改变和复用")]),s._v(" "),a("li",[s._v("一个对象改变将导致一个或多个对象也发生改变。")]),s._v(" "),a("li",[s._v("需要系统创建一个触发链，A对象的行为将影响B对象，B对象行为将影响C对象..可以创建一种链式触发机制")])]),s._v(" "),a("h2",{attrs:{id:"访问者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式"}},[s._v("#")]),s._v(" 访问者模式")]),s._v(" "),a("p",[s._v("主要包含访问者和被访问两个主要组成部分，被访问的元素有不同类型，且不同访问者可以对它们进行不同的访问操作。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("提供一个作用于某对象结构中的各元素的操作表示，它使得可以在不改变各元素的类的前提下定义作用于这些元素的新操作，访问者模式是一种对象的行为型模式。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Vistor（抽象访问者）：为对象结构中每一个具体元素类ConcreteElement声明一个访问操作，从这个操作的名称或参数类型可以清楚知道需要访问的具体元素类型，具体访问者需要实现这些操作方法，定义对这些元素的访问操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Vistor{\n\tpublic abstract void visit(ConcreateElementA elementA);\n\tpublic abstract void Visit(ConcreateElementB elementB);\n\tpublic void visit(ConcreteElementC elementC) {\n\t\t// 操作C\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteVisitor（具体访问者）：具体访问者实现了每个由抽象访问者声明的操作，每一个操作作用于访问对象结构中的一种类型的元素")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteVisitor extends Visitor{\n\tpublic void visit(ConcreteElementA elementA) {\n\t\t// 元素A的操作代码\n\t}\n\tpublic void visit(ConcreteElementB elementB) {\n\t\t// 元素B的操作代码\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Element（抽象元素）：接口或抽象类，定义一个accept（）方法，该方法通常以一个抽象访问者作为参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interfact Element{\n\tpublic void accept(Visitor visitor)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreateElement（具体访问者）：实现accept（）方法，方法中调用访问者的访问方法，完成对一个元素的操作。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteElmentA implements Element{\n\tpublic void accept(Vistor vistor){\n\t\tvisitor.visit(this);\n\t}\n\tpublic void operationA() {\n\t\t// 业务方法\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ObjectStructure（对象结构）：元素集合，提供了遍历其内部元素的方法，可以结合组合模式来实现，也可以是一个简单的集合对象")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ObjectStructure{\n\tprivate ArrayList<Element> list = new ArrayList<Element>();\n\tpublic void accept(Vistor vistor) {\n\t\tIterator i = list.iterator()\n\t\twhile(i.hasNext()) {\n\t\t\t((Element)i.next()).accept(vistor)\n\t\t}\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])])]),s._v(" "),a("p",[s._v("访问者使用条件较为苛刻，本身复杂，实际使用频道不会很高。")]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("增加新的访问者操作很方便")]),s._v(" "),a("li",[s._v("有关元素对象的访问行为集中到一个访问者对象中，而不是分散在一个个元素中，职责清晰。")]),s._v(" "),a("li",[s._v("用户能够在不修改现有元素类层次结构的情况下，定义用于该层次结构的操作")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("增加新的元素很困难。违背开闭原则")]),s._v(" "),a("li",[s._v("破坏封装。访问者要求访问对象并调用每个元素对象的操作。")])]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("对象结构包含多个类型对象，希望对对象实施一些依赖其具体类型的操作")]),s._v(" "),a("li",[s._v('需要对一个对象结构中的对象进行很多不同的并且不相关的操作，需要避免这些操作"污染"这些对象的类.')]),s._v(" "),a("li",[s._v("对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作")])]),s._v(" "),a("h2",{attrs:{id:"策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[s._v("#")]),s._v(" 策略模式")]),s._v(" "),a("p",[s._v("定义一些独立的类来封装不同的算法，目的是为了将使用和定义分开。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("定义一系列算法，将每个算法封装起来，并让它们可以相互替换。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Context（环境类）：使用算法的角色，解决某个问题是可以采用多种策略，维持一个抽象策略的引用实例，用于定义所曹勇的策略")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Context{\n\tprivate AbstractStrategy strategy;\n\tpublic void setStrategy(AbstractStrategy strategy){\n\t\tthis.strategy = strategy;\n\t}\n\tpublic void algorigthm() {\n\t\tstrategy.algorithm();\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Strategy（抽象策略类）：声明抽象方法，是所有策略的分类，可以是抽象类、具体类，也可以是接口。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class AbstractStrategy{\n\tpublic abstract void algorithm();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteStrategy（具体策略类）：实现了再抽象策略类中声明的算法，在运行时，具体策略将覆盖环境类中定义的抽象策略类对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreateStrategyA extends AbstractStrategy{\n\tpublic void algorithm() {\n\t\t//\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("p",[s._v("典型应用实例：Container > LayoutManager > (FlowLayout，GridLayout)")]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("符合开闭原则，可以不修改原有系统的基础上选择算法或增加算法")]),s._v(" "),a("li",[s._v("提供了管理相关算法族的族。继承、公共的代码移到抽象策略类中，避免重复的代码。")]),s._v(" "),a("li",[s._v("可以替换继承关系的办法。")]),s._v(" "),a("li",[s._v("避免多重条件选择语句。")]),s._v(" "),a("li",[s._v("算法复用机制。")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("客户端必须知道所有的策略类。")]),s._v(" "),a("li",[s._v("会产生很多具体策略类。")]),s._v(" "),a("li",[s._v("无法同时在客户端使用多个策略类")])]),s._v(" "),a("p",[a("strong",[s._v("使用场景")])]),s._v(" "),a("ol",[a("li",[s._v("一个系统需要动态地在几种算法中选择一种")]),s._v(" "),a("li",[s._v("一个对象有很多的行为")]),s._v(" "),a("li",[s._v("不希望客户端知道复杂的与算法相关的数据结构，在具体策略中封装算法与相关数据结构，可以提高算法的保密性与安全性。")])]),s._v(" "),a("h2",{attrs:{id:"模板方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板方法"}},[s._v("#")]),s._v(" 模板方法")]),s._v(" "),a("p",[s._v("模板方法提供了一个模板方法定义算法框架，具体步骤的实现可以在其子类中完成。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("定义一个操作中算法的框架，而将一些步骤延迟到子类中，模板方法使得子类可以在不改变一个算法的结构即可重定义该算法的某些特定的步骤。模板方法是一种类型行为模式。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("AbstractClass（抽象类）：定义一一系列基本操作，可以是具体也可以是抽象，每个基本操作对应算法的一个步骤，在其子类可以重定义或实现这些步骤。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class AbstractClass{\n\tpublic void templateMethod() {\n\t\tprimitiveOperation1();\n\t\tprimitiveOperation2();\n\t}\n\tpublic void primitiveOperation1(){\n\t\txx\n\t}\n\tpublic abstract void primitiveOperation2(); \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteClass（具体子类）：抽象类的子类，实现父类中声明的抽象方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteClass extends AbstractClass{\n\tpublic void primitiveOperation2(){\n\t\t// 实现\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("在父类形式化地定义一个算法，子类实现细节，实现详细的处理算法不会改变算法中步骤的执行次序")]),s._v(" "),a("li",[s._v("代码复用技术")]),s._v(" "),a("li",[s._v("反向控制，子类覆盖父类的方法。符合单一职责、开闭原则")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("p",[s._v("要为每个基本方法的不同实现提供一个子类，会导致类变多")]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("对一些复杂的算法进行分割，固定不变设计为模板方法和父类具体方法，改变的细节有子类实现")]),s._v(" "),a("li",[s._v("公共行为提取到父类，避免代码重复")]),s._v(" "),a("li",[s._v("通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反控。")])]),s._v(" "),a("h2",{attrs:{id:"命令模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[s._v("#")]),s._v(" 命令模式")]),s._v(" "),a("p",[s._v("命令模式可以将请求发送者和接收者完全解耦，发送者和接收者之间没有直接引用关系，发送只要知道如何发送，不必知道如何完成请求")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("将一个请求封装为一个对象，从而可用不同的请求对客户端进行参数化。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Command（抽象命令类）；一般是接口或抽象类，声明了用与执行的execute()方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Command{\n\tpublic abstract void execute();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteCommand（具体命令类）：抽象美丽类的子类，实现execute方法，他对应具体的接收者对象，将接收者对象的动作绑定其中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public ConcreteCommand extends Command{\n\tprivate Receiver receiver;\n\tpublic void execute() {\n\t\treceiver.action();\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Invoker（调用者）：请求发送者，它通过命令对象来执行请求，不需要在设计时确定其接收者，只与抽象命令类之间存在关系。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Invoker{\n\tprivate Command command;\n\tpublic Invoker(Command command) {\n\t\tthis.command=command;\n\t}\n\tpublic void call() {\n\t\tcommand.execute();\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Receiver（接收者）：执行与请求相关的操作，具体实现对请求的业务处理。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Receiver{\n\tpublic void action(){\n\t\t...\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("降低系统的耦合度。")]),s._v(" "),a("li",[s._v("新的命令容易加入到系统中。符合开闭原则。")]),s._v(" "),a("li",[s._v("容易设计一个命令队列或宏命令")]),s._v(" "),a("li",[s._v("为请求的撤销/恢复提供了一种设计和实现方案")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("p",[s._v("过多具体命令类。")]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("请求调用者和接收者解耦。请求无效知道接收者存在，接收者也无须关心何时被调用")]),s._v(" "),a("li",[s._v("系统支持撤销/恢复操作")]),s._v(" "),a("li",[s._v("需要一组操作组合在一起形成宏命令")])]),s._v(" "),a("h2",{attrs:{id:"备忘录模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式"}},[s._v("#")]),s._v(" 备忘录模式")]),s._v(" "),a("p",[s._v("提供了一种状态恢复的实现机制。")]),s._v(" "),a("p",[s._v("在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Originator（原发器）：普通类，可以创建一个备忘录，存储当前内部状态，也可以恢复其内部状态。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Originator{\n\tprivate String state;\n\tpublic Memento createMemento() {\n\t\treturn new Memento(this);\n\t}\n\tpublic void restoreMemento(Memento m) {\n\t\tstate = m.state\n\t}\n\tpublic String getState() {\n\t\treturn this.state;\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Memento（备忘录）：存储原发器的内部状态，根据原发器来决定保存哪些内部状态。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Memento{\n\tprivate String state;\n\tpublic Memento(Originator o) {\n\t\tstate = o.getState();\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Caretaker（负责人）：又称为管理者，负责保存备忘录，但是不能对备忘录的内容进行操作或检查。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Catetaker{\n\tprivate Memento memento;\n\tpublic Memento getMemento() {\n\t\treturn memento;\n\t}\n\tpublic void setMemento(Memento memento) {\n\t\tthis.memento = memento;\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])])]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("提供了一个状态恢复的实现机制")]),s._v(" "),a("li",[s._v("实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码改动。")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("p",[s._v("资源消耗过大")]),s._v(" "),a("p",[a("strong",[s._v("使用场景")])]),s._v(" "),a("ol",[a("li",[s._v("保存一个对象在某一个时刻的全部或部分状态，需要时恢复，提供撤销功能")]),s._v(" "),a("li",[s._v("防止外界对象破坏一个对象历史状态的封装性，避免将对象历史状态的实现细节暴露给外界对象。")])]),s._v(" "),a("h2",{attrs:{id:"解释器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式"}},[s._v("#")]),s._v(" 解释器模式")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("定义一个语言的文法，建立一个解释器来解耦该语言中的句子，这里的“语言”是指使用规定格式和语法的代码")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("AbstractExpression（抽象表达式）：声明了抽象的解释操作，终结和非总结符表达式的公共父类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class AbstractionExpression{\n\tpublic abstract void interpret(Context ctx);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("TerminalExpression（终结符表达式）：AbstractExpression子类，每个总结符都是该类的一个实例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class TerminalExpression extends AbstractExpression{\n\tpublic void interpret(Context ctx){\n\t\t// 终结表达式的解释操作\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("NonterminalExpression（非终结符表达式）：AbstractExpression子类，非终结符的解释操作，解释操作一般通过递归的方式来完成")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class NoterminalExpression extends AbstractExpression{\n\tprivate AbstractExpression left;\n\tprivate AbstractExpression right;\n\tpublic NoterminalExpression(AbstractExpression left, AbstractExpression right){\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t}\n\tpbulic void interpret(Context ctx){\n\t\t// 递归调用每一个组成成员\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Context（环境类）：又称为上下文类，存储解释器之外的一些全局信息，通常它临时存储了需要解释的语句")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Context{\n\tprivate HashMap map = newHashMap();\n\tpubliv void assign(string key, string value){\n\t\t// 设值\n\t}\n\tpublic string lookup(String key){\n\t\t// 获取存储的值\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"组合模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[s._v("#")]),s._v(" 组合模式")]),s._v(" "),a("p",[s._v("让叶子对象和容器对象的使用具有一致性。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("组合多个对象形成树形结构以表示具有“整体-部分”关系的层次结构")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Component（抽象构件）：接口或抽象类，为子构件和容器对象声明接口，可以包含所有子类公用有的行为的声明和实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Component{\n\tpublic abstract void add(Component c);\n\tpublic abstract void remove(Component c);\n\tpublic abstract void getChild(int i);\n\tpublic abstract void operation(Component c);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Leaf（叶子构件）：没有子节点，实现抽象构件定义的行为")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Leaf extends Component{\n\tpublic void add(Component c){\n\t\t// 异常或错误提示\n\t}\n\tpublic void remove(Component c){\n\t\t// 异常或错误提示\n\t}\n\tpublic void getChild(int i){\n\t\t// 异常或错误提示\n\t}\n\tpublic void operation(Component c){\n\t\t// 操作\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Composite（容器构件）：包含子节点，实现抽象构件定义的行为")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Comosite extends Component{\n\tprivate ArrayList<Component> list = new ArrayList<Component>()\n\tpublic void add(Component c){\n\t\tlist.add(c)\n\t}\n\tpublic void remove(Component c){\n\t\tlist.remove(c)\n\t}\n\tpublic void getChild(int i){\n\t\treturn list.get(i)\n\t}\n\tpublic void operation() {\n\t\tfor (Object obj: list){\n\t\t\t((Component)obj).operation();\n\t\t}\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])])])]),s._v(" "),a("p",[s._v("Java SE中的AWT和Swing包的设计就是基于组合模式。")]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("清晰定义分层次的复杂对象，表示对象的全部和部分层次，让客户端忽略了层次的差异，方便对整个层次结构进行控制。")]),s._v(" "),a("li",[s._v("客户端可以一致使用组合结构或其中的单个对象，不关心是单个还是组合，简化客户端。")]),s._v(" "),a("li",[s._v("增加容器和叶子很方便，符合开闭原则")]),s._v(" "),a("li",[s._v("为树形结构提供了灵活的解决方案")])]),s._v(" "),a("p",[a("strong",[s._v("缺点")])]),s._v(" "),a("ol",[a("li",[s._v("难对容器中的类型进行限制。")])]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("整体和部分层次结构，希望忽略差异，客户端可以一致对待它们")]),s._v(" "),a("li",[s._v("树形结构")]),s._v(" "),a("li",[s._v("树形结构，分离出叶子对象和容器对象，且它们的类型不固定，希望增加新的类型。")])]),s._v(" "),a("p",[a("strong",[s._v("桥接模式")])]),s._v(" "),a("p",[s._v("系统中某个类存在独立变化的维度，通过桥接模式可以将这两个维度分离出来，使两者可以独立扩展。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("将抽象部分和其实现部分分离，使它们都可以独立地变化。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Abstraction（抽象类）：抽象类或接口，其中定义了一个Implementor（实现类接口）类型的对象并可以维护该对象，它与Implementor之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Abstraction{\n\tprotected Implementor impl;\n\tpublic void setImpl(Implementor impl){\n\t\tthis.impl = impl;\n\t}\n\tpublic abstract void operation();// 声明抽象业务方法\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("RefinedAbstraction（扩充抽象类）：定义接口，通常情况是具体类，不是抽象类，实现Abstraction中的抽象业务方法，可以调用Implementor中定义的业务方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class RefinedAbstraction extends Abstraction{\n\tpublic void operation() {\n\t\t// 业务代码\n\t\timpl.operationImpl();\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Implementor（实现类接口）：可以和Abstraction完全不同，定义基本操作。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Implementor{\n\tpublic void operationImpl();\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteImplementor（具体实现类）：实现Implementor接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteImplementor implement Implementor{\n\tpublic void operationImpl(){\n\t\t// xx\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("p",[s._v("Java虚拟机和JDBC等驱动程序的核心模式之一。")]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("分离抽象和实现。")]),s._v(" "),a("li",[s._v("可以取代多继承方案")]),s._v(" "),a("li",[s._v("提高里系统的扩展性")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("增加系统理解和设计的难道，关联建立在抽象层，要求开发者一开始就要针对抽象层进行设计")]),s._v(" "),a("li",[s._v("要求正确识别系统中两个独立变化的维度，使用范围有一定局限性。")])]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("抽象类和具体类之间增加更多的灵活性，避免两个层次建立静态的继承关系。")]),s._v(" "),a("li",[s._v("抽象和实现部分可以以继承方式扩展而互不影响。")]),s._v(" "),a("li",[s._v("类中存在独立变化的维度。")]),s._v(" "),a("li",[s._v("不希望通过继承方式扩展。")])]),s._v(" "),a("h2",{attrs:{id:"外观模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[s._v("#")]),s._v(" 外观模式")]),s._v(" "),a("p",[s._v("一个子系统的外部和内部通讯通过一个统一的外观角色进行，将客户端与子系统中的内部复杂性分开。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("外部与一个子系统通信通过一个统一的外观角色进行，为子系统中的一组接口提供一个一致入口。")]),s._v(" "),a("ol",[a("li",[s._v("Facade（外观角色）：定义相关系统的功能和职责")]),s._v(" "),a("li",[s._v("SubSystem（子系统角色）：可以有一个或多个子系统角色，不是单独的类，而是一个类的集合，实现子系统的功能。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Facade{\n\tprivate  SubSystemA obj1= new SubSystemA();\n\tprivate SubSystemB obj2 = new SubSystemB();\n\t..\n\tpublic void method() {\n\t\tobj1.method();\n\t\tobj2.method();\n\t\t....\n\t}\n\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("简化客户端和子系统的交付，为复杂的子系统提供一个统一的入口。菜单和工具类就是B/S系统的外观角色。")]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("客户端屏蔽子系统组件")]),s._v(" "),a("li",[s._v("子系统和客户端之间松耦合")]),s._v(" "),a("li",[s._v("子系统修改对其他子系统没有影响")]),s._v(" "),a("li",[s._v("提供一个访问子系统的统一入口")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("不能好好限制客户端使用子系统类")]),s._v(" "),a("li",[s._v("设计不当，添加子系统需要修改外观模式的源码，违背开闭原则")])]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("复杂子系统提供一个简单入口")]),s._v(" "),a("li",[s._v("客户端和多个子系统存在很大的依赖关系")]),s._v(" "),a("li",[s._v("层次结构中，可以使用外观模式定义系统中每一层的入口，层次之间不直接产生联系，通过外观降低耦合度")])]),s._v(" "),a("h2",{attrs:{id:"中介者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[s._v("#")]),s._v(" 中介者模式")]),s._v(" "),a("p",[s._v("简化对象之间的复杂交互，迪米特法则的一个典型应用。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("封装一系列对象交互，使各对象不需要显式地相互引用，使其耦合松散，可以独立改变它们之间的交互。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Mediator（抽象中介者）：定义一个接口，该接口用于与各同事对象之间进行通信")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Mediator{\n\tProtected ArrayList<Colleague> colleagues;\n\t// 注册，增加同事对象\n\tpublic void register(Colleague colleague) {\n\t\tcolleagues.add(colleagure)\n\t}\n\tpublic abstract void operation(c Colleague);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreteMediator（具体中介者）：Mediator子类，协调各个同事对象来协作行为，维持了对各个同事对象的引用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class ConcreateMediator extends Mediator{\n\tpublic void operation(c Colleague){\n\t\t(Colleague)(Colleagues.get(0))).method1();// 通过中介者调用同事类方法\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("Colleague（抽象同事）：各个同事类公有方法，声明了一些抽象方法来供子类实现，同时维持了一个抽象中介者类的引用，子类可以通过该引用来与中介者通信")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Colleague{\n\tprotected Mediator meditor;\n\tpublic Colleague(Mediator mediator){\n\t\tthis.meditor = meditor\n\t}\n\tpublic abstract void method1();\n\tpublic void update(){\n\t\tmediator.operation(this);// 与中介者通信\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("ConcreateColleague（具体同事类）：Colleague的子类，和其他同事通信先与中介通信，通过中介者间接完成与其他同事类的通信。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ConcreteColleague extends Colleague{\n\tpublic ConcreteColleague(Mediator mediator){\n\t\tsuper(mediator);\n\t}\n\tpublic void method1(){\n\t\t...\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])])]),s._v(" "),a("p",[s._v("客户端直接通过调用具体同事类的update()方法调用中介者和其他同事通信。")]),s._v(" "),a("p",[s._v("中介者将一个网状的系统结构变成一个以中介者为中心的星状结构，代替原来的多对多关系，事件驱动软件中用的比较广泛，特别是基于GUI的应用软件。")]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("简化了对象之间的交互，一对多代替了原来的多对多。")]),s._v(" "),a("li",[s._v("将各个同事之间解耦")]),s._v(" "),a("li",[s._v("减少同事子类生成，将原本分布于多个对象之间的行为集中在一起。")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("中介者类中包含大量同事之间的交互细节，可能会导致中介者复杂，系统难以维护")])]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("系统中对象之间存在复杂引用，结构混乱")]),s._v(" "),a("li",[s._v("一个对象由于引用了其他很多对象，并且直接和对象通信，导致难以复用")]),s._v(" "),a("li",[s._v("想通过一个中间类分装多个类中的行为，而又不想生成太多子类。")])]),s._v(" "),a("h2",{attrs:{id:"享元模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[s._v("#")]),s._v(" 享元模式")]),s._v(" "),a("p",[s._v("通过技术实现相同或相似对象的重用。")]),s._v(" "),a("p",[a("strong",[s._v("定义")])]),s._v(" "),a("p",[s._v("支持大量细粒度对象的复用。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("Flyweight（抽象享元类）：一个接口或抽象类，声明了具体享元的公共方法")])]),s._v(" "),a("li",[a("p",[s._v("ConcreteFlyweight（具体享元类）：实现Flyweight，内部提供了存储空间")])]),s._v(" "),a("li",[a("p",[s._v("UnsharedConcreteFlyweight（非共享具体享元类）：不同共享的子类可设计为非共享具体享元类。")])]),s._v(" "),a("li",[a("p",[s._v("FlyweightFactory（享元工厂类）：创建、管理享元对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class FlyweightFactory{\n\tprivate HashMap flyweights = new HashMap();\n\tpublic Flywight getFlyweight(string key){\n\t\tif (flyweights.ContainsKey(key)){\n\t\t\treturn (Flywight)flyweights.get(key);\n\t\t} else {\n\t\t\tFlyweight fw = new ConcreteFlyweight();\n\t\t\tflyweights.put(key, fw);\n\t\t\treturn fw;\n\t\t}\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])])]),s._v(" "),a("p",[s._v("系统中存在大量的相同或者相似的对象时，可以考虑使用该模式")]),s._v(" "),a("p",[a("strong",[s._v("主要优点")])]),s._v(" "),a("ol",[a("li",[s._v("减少内存中的对象的数量")]),s._v(" "),a("li",[s._v("外部状态独立，不会影响其内部状态")])]),s._v(" "),a("p",[a("strong",[s._v("主要缺点")])]),s._v(" "),a("ol",[a("li",[s._v("系统变为复杂")]),s._v(" "),a("li",[s._v("对象可以共享，需要分离出内部状态和外部状态。")])]),s._v(" "),a("p",[a("strong",[s._v("适用场景")])]),s._v(" "),a("ol",[a("li",[s._v("系统中存在大量相同或相似的对象。")]),s._v(" "),a("li",[s._v("对象的大状态可以外部化。")]),s._v(" "),a("li",[s._v("多次重复使用享元对象")])])])}),[],!1,null,null,null);t.default=e.exports}}]);